import React from 'react';
import { useQuery } from 'react-query';
import {
  Box,
  Typography,
  Card,
  CardContent,
  Grid,
  CircularProgress,
  Alert,
  Chip,
} from '@mui/material';
import {
  PieChart,
  Pie,
  Cell,
  ResponsiveContainer,
  Legend,
  Tooltip,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
} from 'recharts';
import { useAuth } from '../contexts/AuthContext';
import { githubApi } from '../services/api';

export interface OrganizationVulnerabilityStats {
  sastVulnerabilities: {
    total: number;
    critical: number;
    high: number;
    medium: number;
    low: number;
  };
  leakedSecrets: {
    total: number;
    critical: number;
    high: number;
    medium: number;
    low: number;
  };
  scaVulnerabilities: {
    total: number;
    critical: number;
    high: number;
    medium: number;
    low: number;
  };
  totalVulnerabilities: number;
  repositoriesScanned: number;
}

const COLORS = {
  sast: '#FF6B6B',
  leakedSecrets: '#4ECDC4',
  sca: '#45B7D1',
};

const SEVERITY_COLORS = {
  critical: '#8B0000',
  high: '#FF4444',
  medium: '#FFA500',
  low: '#90EE90',
};

const OrganizationVulnerabilityOverview: React.FC = () => {
  const { organization } = useAuth();

  console.log('OrganizationVulnerabilityOverview - organization:', organization);

  const { 
    data: vulnerabilityStats, 
    isLoading, 
    error 
  } = useQuery<OrganizationVulnerabilityStats, Error>(
    ['organizationVulnerabilities', organization],
    () => {
      console.log('Making API call for organization:', organization);
      return githubApi.getOrganizationVulnerabilityStats(organization!);
    },
    { 
      enabled: !!organization,
      refetchInterval: 5 * 60 * 1000, // Refresh every 5 minutes
    }
  );

  console.log('OrganizationVulnerabilityOverview - data:', vulnerabilityStats, 'loading:', isLoading, 'error:', error);

  if (isLoading) {
    return (
      <Card>
        <CardContent>
          <Box display="flex" justifyContent="center" alignItems="center" minHeight="300px">
            <CircularProgress />
          </Box>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card>
        <CardContent>
          <Alert severity="error">
            Failed to load organization vulnerability data: {error.message}
          </Alert>
        </CardContent>
      </Card>
    );
  }

  if (!vulnerabilityStats) {
    return (
      <Card>
        <CardContent>
          <Alert severity="info">
            No vulnerability data available for organization: {organization}
          </Alert>
        </CardContent>
      </Card>
    );
  }

  const pieData = [
    {
      name: 'SAST',
      value: vulnerabilityStats.sastVulnerabilities.total,
      color: COLORS.sast,
    },
    {
      name: 'Leaked Secrets',
      value: vulnerabilityStats.leakedSecrets.total,
      color: COLORS.leakedSecrets,
    },
    {
      name: 'SCA',
      value: vulnerabilityStats.scaVulnerabilities.total,
      color: COLORS.sca,
    },
  ].filter(item => item.value > 0);

  const barData = [
    {
      name: 'SAST',
      critical: vulnerabilityStats.sastVulnerabilities.critical,
      high: vulnerabilityStats.sastVulnerabilities.high,
      medium: vulnerabilityStats.sastVulnerabilities.medium,
      low: vulnerabilityStats.sastVulnerabilities.low,
    },
    {
      name: 'Leaked Secrets',
      critical: vulnerabilityStats.leakedSecrets.critical,
      high: vulnerabilityStats.leakedSecrets.high,
      medium: vulnerabilityStats.leakedSecrets.medium,
      low: vulnerabilityStats.leakedSecrets.low,
    },
    {
      name: 'SCA',
      critical: vulnerabilityStats.scaVulnerabilities.critical,
      high: vulnerabilityStats.scaVulnerabilities.high,
      medium: vulnerabilityStats.scaVulnerabilities.medium,
      low: vulnerabilityStats.scaVulnerabilities.low,
    },
  ];

  const CustomPieTooltip = ({ active, payload }: any) => {
    if (active && payload && payload.length) {
      const data = payload[0];
      return (
        <Box
          sx={{
            backgroundColor: 'white',
            border: '1px solid #ccc',
            borderRadius: 1,
            padding: 1,
            boxShadow: 2,
          }}
        >
          <Typography variant="subtitle2">{`${data.name}: ${data.value} vulnerabilities`}</Typography>
        </Box>
      );
    }
    return null;
  };

  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <Box
          sx={{
            backgroundColor: 'white',
            border: '1px solid #ccc',
            borderRadius: 1,
            padding: 1,
            boxShadow: 2,
          }}
        >
          <Typography variant="subtitle2">{`${label}: ${payload[0].value} vulnerabilities`}</Typography>
        </Box>
      );
    }
    return null;
  };

  const CustomBarTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <Box
          sx={{
            backgroundColor: 'white',
            border: '1px solid #ccc',
            borderRadius: 1,
            padding: 1,
            boxShadow: 2,
          }}
        >
          <Typography variant="subtitle2" gutterBottom>{label}</Typography>
          {payload.map((entry: any) => (
            <Typography 
              key={entry.dataKey} 
              variant="body2" 
              sx={{ color: entry.color }}
            >
              {entry.dataKey}: {entry.value}
            </Typography>
          ))}
        </Box>
      );
    }
    return null;
  };

  return (
    <Card>
      <CardContent>
        <Typography variant="h6" gutterBottom>
          Organization-Wide Vulnerability Overview
        </Typography>
        <Typography variant="body2" color="text.secondary" gutterBottom>
          Comprehensive vulnerability data across ALL {vulnerabilityStats.repositoriesScanned} repositories in {organization}
        </Typography>
        <Typography variant="caption" color="text.secondary" gutterBottom sx={{ fontStyle: 'italic' }}>
          Data includes all repositories in the organization, not limited to business application mappings
        </Typography>

        <Grid container spacing={3} sx={{ mt: 1 }}>
          {/* Summary Cards */}
          <Grid item xs={12} md={3}>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
              <Card variant="outlined">
                <CardContent sx={{ textAlign: 'center', py: 2 }}>
                  <Typography variant="h4" color="primary" fontWeight="bold">
                    {vulnerabilityStats.totalVulnerabilities}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Total Vulnerabilities
                  </Typography>
                </CardContent>
              </Card>

              <Card variant="outlined">
                <CardContent sx={{ py: 2 }}>
                  <Typography variant="subtitle2" gutterBottom>
                    SAST (Code Scanning)
                  </Typography>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Typography variant="h6" sx={{ color: COLORS.sast }}>
                      {vulnerabilityStats.sastVulnerabilities.total}
                    </Typography>
                    <Box sx={{ display: 'flex', gap: 0.5 }}>
                      {vulnerabilityStats.sastVulnerabilities.critical > 0 && (
                        <Chip 
                          label={`C:${vulnerabilityStats.sastVulnerabilities.critical}`} 
                          size="small" 
                          sx={{ bgcolor: SEVERITY_COLORS.critical, color: 'white', fontSize: '0.7rem' }}
                        />
                      )}
                      {vulnerabilityStats.sastVulnerabilities.high > 0 && (
                        <Chip 
                          label={`H:${vulnerabilityStats.sastVulnerabilities.high}`} 
                          size="small" 
                          sx={{ bgcolor: SEVERITY_COLORS.high, color: 'white', fontSize: '0.7rem' }}
                        />
                      )}
                    </Box>
                  </Box>
                </CardContent>
              </Card>

              <Card variant="outlined">
                <CardContent sx={{ py: 2 }}>
                  <Typography variant="subtitle2" gutterBottom>
                    Leaked Secrets
                  </Typography>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Typography variant="h6" sx={{ color: COLORS.leakedSecrets }}>
                      {vulnerabilityStats.leakedSecrets.total}
                    </Typography>
                    <Box sx={{ display: 'flex', gap: 0.5 }}>
                      {vulnerabilityStats.leakedSecrets.critical > 0 && (
                        <Chip 
                          label={`C:${vulnerabilityStats.leakedSecrets.critical}`} 
                          size="small" 
                          sx={{ bgcolor: SEVERITY_COLORS.critical, color: 'white', fontSize: '0.7rem' }}
                        />
                      )}
                      {vulnerabilityStats.leakedSecrets.high > 0 && (
                        <Chip 
                          label={`H:${vulnerabilityStats.leakedSecrets.high}`} 
                          size="small" 
                          sx={{ bgcolor: SEVERITY_COLORS.high, color: 'white', fontSize: '0.7rem' }}
                        />
                      )}
                    </Box>
                  </Box>
                </CardContent>
              </Card>

              <Card variant="outlined">
                <CardContent sx={{ py: 2 }}>
                  <Typography variant="subtitle2" gutterBottom>
                    SCA (Dependabot)
                  </Typography>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Typography variant="h6" sx={{ color: COLORS.sca }}>
                      {vulnerabilityStats.scaVulnerabilities.total}
                    </Typography>
                    <Box sx={{ display: 'flex', gap: 0.5 }}>
                      {vulnerabilityStats.scaVulnerabilities.critical > 0 && (
                        <Chip 
                          label={`C:${vulnerabilityStats.scaVulnerabilities.critical}`} 
                          size="small" 
                          sx={{ bgcolor: SEVERITY_COLORS.critical, color: 'white', fontSize: '0.7rem' }}
                        />
                      )}
                      {vulnerabilityStats.scaVulnerabilities.high > 0 && (
                        <Chip 
                          label={`H:${vulnerabilityStats.scaVulnerabilities.high}`} 
                          size="small" 
                          sx={{ bgcolor: SEVERITY_COLORS.high, color: 'white', fontSize: '0.7rem' }}
                        />
                      )}
                    </Box>
                  </Box>
                </CardContent>
              </Card>
            </Box>
          </Grid>

          {/* Pie Chart */}
          <Grid item xs={12} md={4}>
            <Box>
              <Typography variant="subtitle1" gutterBottom textAlign="center">
                Vulnerability Distribution
              </Typography>
              <ResponsiveContainer width="100%" height={300}>
                <PieChart>
                  <Pie
                    data={pieData}
                    cx="50%"
                    cy="50%"
                    innerRadius={60}
                    outerRadius={100}
                    paddingAngle={5}
                    dataKey="value"
                  >
                    {pieData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip content={<CustomPieTooltip />} />
                  <Legend />
                </PieChart>
              </ResponsiveContainer>
            </Box>
          </Grid>

          {/* Bar Chart */}
          <Grid item xs={12} md={5}>
            <Box>
              <Typography variant="subtitle1" gutterBottom textAlign="center">
                Vulnerability Severity Breakdown
              </Typography>
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={barData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis />
                  <Tooltip content={<CustomBarTooltip />} />
                  <Legend />
                  <Bar dataKey="critical" stackId="a" fill={SEVERITY_COLORS.critical} />
                  <Bar dataKey="high" stackId="a" fill={SEVERITY_COLORS.high} />
                  <Bar dataKey="medium" stackId="a" fill={SEVERITY_COLORS.medium} />
                  <Bar dataKey="low" stackId="a" fill={SEVERITY_COLORS.low} />
                </BarChart>
              </ResponsiveContainer>
            </Box>
          </Grid>
        </Grid>
      </CardContent>
    </Card>
  );
};

export default OrganizationVulnerabilityOverview;
