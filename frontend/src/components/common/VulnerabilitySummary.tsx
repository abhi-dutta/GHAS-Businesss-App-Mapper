import React from 'react';
import { Box, Typography, Grid } from '@mui/material';
import { styleMixins } from '../../styles/mixins';
import { COLORS } from '../../styles/theme';
import { GradientText, StatsBox } from './StyledComponents';

interface VulnerabilityStats {
  total: number;
  critical: number;
  high: number;
  medium: number;
  low: number;
}

interface VulnerabilitySummaryProps {
  stats: VulnerabilityStats;
  type: string;
}

// Refactored component with reusable styles
export const VulnerabilitySummary: React.FC<VulnerabilitySummaryProps> = ({ stats, type }) => {
  const hasVulnerabilities = stats.total > 0;
  
  return (
    <Box sx={{ textAlign: 'center', mb: 4 }}>
      {/* Main count display using centralized styles */}
      <Box sx={{
        ...styleMixins.centerContent(),
        minWidth: 80,
        padding: '8px 20px',
        height: 80,
        borderRadius: '40px',
        background: hasVulnerabilities ? COLORS.gradients.warning : COLORS.gradients.success,
        color: 'white',
        fontWeight: 'bold',
        fontSize: '2rem',
        boxShadow: hasVulnerabilities 
          ? '0 4px 15px rgba(255, 165, 0, 0.4)' 
          : '0 4px 15px rgba(144, 238, 144, 0.4)',
        mb: 2,
      }}>
        {stats.total.toLocaleString()}
      </Box>
      
      {/* Gradient text using reusable component */}
      <GradientText variant="h6" sx={{ mb: 3 }}>
        Total {type} vulnerabilities found
      </GradientText>
      
      {/* Stats grid using reusable StatsBox component */}
      <Grid container spacing={2}>
        {stats.critical > 0 && (
          <Grid item xs={6} sm={3}>
            <StatsBox severity="critical" count={stats.critical} label="Critical" />
          </Grid>
        )}
        {stats.high > 0 && (
          <Grid item xs={6} sm={3}>
            <StatsBox severity="high" count={stats.high} label="High" />
          </Grid>
        )}
        {stats.medium > 0 && (
          <Grid item xs={6} sm={3}>
            <StatsBox severity="medium" count={stats.medium} label="Medium" />
          </Grid>
        )}
        {stats.low > 0 && (
          <Grid item xs={6} sm={3}>
            <StatsBox severity="low" count={stats.low} label="Low" />
          </Grid>
        )}
      </Grid>
    </Box>
  );
};
