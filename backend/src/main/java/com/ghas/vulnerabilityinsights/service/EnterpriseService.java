package com.ghas.vulnerabilityinsights.service;

import com.ghas.vulnerabilityinsights.dto.CodeScanningAlertDto;
import com.ghas.vulnerabilityinsights.dto.DependabotAlertDto;
import com.ghas.vulnerabilityinsights.dto.SecretScanningAlertDto;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import reactor.core.publisher.Mono;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Service for interacting with GitHub Enterprise APIs with improved pagination.
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class EnterpriseService {

    private final WebClient webClient;

    @Value("${github.api.base-url:https://api.github.com}")
    private String githubApiBaseUrl;

    // Safety limits to prevent infinite loops
    private static final int MAX_PAGES = 100; // Max 100 pages = 10,000 alerts per type
    private static final int PAGE_SIZE = 100;

    /**
     * Get all code scanning alerts for an enterprise with pagination.
     */
    public Mono<List<CodeScanningAlertDto>> getEnterpriseCodeScanningAlerts(String enterprise, String token) {
        log.info("Fetching code scanning alerts for enterprise: {}", enterprise);
        return fetchAllCodeScanningAlerts(enterprise, token, 1, new ArrayList<>(), new HashSet<>());
    }

    /**
     * Get all secret scanning alerts for an enterprise with pagination.
     */
    public Mono<List<SecretScanningAlertDto>> getEnterpriseSecretScanningAlerts(String enterprise, String token) {
        log.info("Fetching secret scanning alerts for enterprise: {}", enterprise);
        String initialUrl = String.format("https://api.github.com/enterprises/%s/secret-scanning/alerts?per_page=%d&state=open", enterprise, PAGE_SIZE);
        return fetchAllSecretScanningAlerts(token, initialUrl, new ArrayList<>());
    }

    /**
     * Get all Dependabot alerts for an enterprise with pagination.
     */
    public Mono<List<DependabotAlertDto>> getEnterpriseDependabotAlerts(String enterprise, String token) {
        log.info("Fetching Dependabot alerts for enterprise: {}", enterprise);
        return fetchAllDependabotAlerts(enterprise, token, 1, new ArrayList<>(), new HashSet<>());
    }

    /**
     * Recursively fetch all code scanning alerts with improved pagination safety.
     */
    private Mono<List<CodeScanningAlertDto>> fetchAllCodeScanningAlerts(String enterprise, String token, int page, List<CodeScanningAlertDto> allAlerts, Set<String> seenAlertUrls) {
        if (page > MAX_PAGES) {
            log.warn("Reached maximum page limit ({}) for code scanning alerts for enterprise: {}, stopping pagination", MAX_PAGES, enterprise);
            return Mono.just(allAlerts);
        }
        
        return webClient.get()
                .uri(uriBuilder -> uriBuilder
                    .scheme("https")
                    .host("api.github.com")
                    .path("/enterprises/{enterprise}/code-scanning/alerts")
                    .queryParam("page", page)
                    .queryParam("per_page", PAGE_SIZE)
                    .queryParam("state", "open")
                    .build(enterprise))
                .header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
                .header(HttpHeaders.ACCEPT, "application/vnd.github+json")
                .header("X-GitHub-Api-Version", "2022-11-28")
                .header(HttpHeaders.USER_AGENT, "GHAS-Vulnerability-Insights")
                .retrieve()
                .bodyToMono(new ParameterizedTypeReference<List<CodeScanningAlertDto>>() {})
                .flatMap(pageResults -> {
                    if (pageResults == null || pageResults.isEmpty()) {
                        log.info("No more code scanning alerts found for enterprise {} at page {}, total: {}", enterprise, page, allAlerts.size());
                        return Mono.just(allAlerts);
                    }

                    List<CodeScanningAlertDto> newAlerts = pageResults.stream()
                        .filter(alert -> alert != null && alert.getHtmlUrl() != null && seenAlertUrls.add(alert.getHtmlUrl()))
                        .collect(Collectors.toList());

                    if (newAlerts.isEmpty() && !pageResults.isEmpty()) {
                        log.warn("No new (unique) code scanning alerts found on page {}. All alerts on this page were duplicates. Stopping pagination.", page);
                        return Mono.just(allAlerts);
                    }
                    
                    allAlerts.addAll(newAlerts);
                    log.info("Fetched {} new code scanning alerts for enterprise {} (page {}), total so far: {}", newAlerts.size(), enterprise, page, allAlerts.size());
                    
                    if (pageResults.size() < PAGE_SIZE) {
                        log.info("Finished fetching code scanning alerts for enterprise {} (last page with {} alerts), total: {}", enterprise, pageResults.size(), allAlerts.size());
                        return Mono.just(allAlerts);
                    } else {
                        return fetchAllCodeScanningAlerts(enterprise, token, page + 1, allAlerts, seenAlertUrls);
                    }
                })
                .doOnError(WebClientResponseException.class, ex -> {
                    log.error("Error fetching code scanning alerts for enterprise {} (page {}): {} - {}", enterprise, page, ex.getStatusCode(), ex.getResponseBodyAsString());
                })
                .onErrorReturn(allAlerts);
    }

    /**
     * Recursively fetch all secret scanning alerts using cursor-based pagination with Link header.
     */
    private Mono<List<SecretScanningAlertDto>> fetchAllSecretScanningAlerts(String token, String apiUrl, List<SecretScanningAlertDto> allAlerts) {
        if (apiUrl == null || apiUrl.isEmpty()) {
            log.info("No more pages to fetch, total secret scanning alerts: {}", allAlerts.size());
            return Mono.just(allAlerts);
        }
        
        log.info("Fetching secret scanning alerts from URL: {}", apiUrl);

        return webClient.get()
                .uri(apiUrl)
                .header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
                .header(HttpHeaders.ACCEPT, "application/vnd.github+json")
                .header("X-GitHub-Api-Version", "2022-11-28")
                .header(HttpHeaders.USER_AGENT, "GHAS-Vulnerability-Insights")
                .retrieve()
                .toEntity(new ParameterizedTypeReference<List<SecretScanningAlertDto>>() {})
                .flatMap(responseEntity -> {
                    List<SecretScanningAlertDto> pageResults = responseEntity.getBody();
                    
                    if (pageResults == null || pageResults.isEmpty()) {
                        log.info("No more secret scanning alerts found, total: {}", allAlerts.size());
                        return Mono.just(allAlerts);
                    }
                    
                    allAlerts.addAll(pageResults);
                    log.info("Fetched {} secret scanning alerts, total so far: {}", pageResults.size(), allAlerts.size());
                    
                    // Check Link header for next page URL
                    String linkHeader = responseEntity.getHeaders().getFirst("Link");
                    String nextUrl = null;
                    
                    if (linkHeader != null) {
                        String[] links = linkHeader.split(",");
                        for (String link : links) {
                            String[] parts = link.split(";");
                            if (parts.length > 1 && parts[1].contains("rel=\"next\"")) {
                                nextUrl = parts[0].trim();
                                // Remove angle brackets
                                nextUrl = nextUrl.substring(1, nextUrl.length() - 1);
                                break;
                            }
                        }
                    }
                    
                    if (nextUrl == null) {
                        log.info("No 'next' link found in Link header, finished fetching secret scanning alerts, total: {}", allAlerts.size());
                        return Mono.just(allAlerts);
                    }
                    
                    return fetchAllSecretScanningAlerts(token, nextUrl, allAlerts);
                })
                .doOnError(WebClientResponseException.class, ex -> {
                    log.error("Error fetching secret scanning alerts from URL {}: {} - {}", apiUrl, ex.getStatusCode(), ex.getResponseBodyAsString());
                })
                .onErrorReturn(allAlerts);
    }
    
    /**
     * Recursively fetch all Dependabot alerts with improved pagination safety.
     */
    private Mono<List<DependabotAlertDto>> fetchAllDependabotAlerts(String enterprise, String token, int page, List<DependabotAlertDto> allAlerts, Set<String> seenAlertUrls) {
        if (page > MAX_PAGES) {
            log.warn("Reached maximum page limit ({}) for Dependabot alerts for enterprise: {}, stopping pagination", MAX_PAGES, enterprise);
            return Mono.just(allAlerts);
        }
        
        return webClient.get()
                .uri(uriBuilder -> uriBuilder
                    .scheme("https")
                    .host("api.github.com")
                    .path("/enterprises/{enterprise}/dependabot/alerts")
                    .queryParam("page", page)
                    .queryParam("per_page", PAGE_SIZE)
                    .queryParam("state", "open")
                    .build(enterprise))
                .header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
                .header(HttpHeaders.ACCEPT, "application/vnd.github+json")
                .header("X-GitHub-Api-Version", "2022-11-28")
                .header(HttpHeaders.USER_AGENT, "GHAS-Vulnerability-Insights")
                .retrieve()
                .bodyToMono(new ParameterizedTypeReference<List<DependabotAlertDto>>() {})
                .flatMap(pageResults -> {
                    if (pageResults == null || pageResults.isEmpty()) {
                        log.info("No more Dependabot alerts found for enterprise {} at page {}, total: {}", enterprise, page, allAlerts.size());
                        return Mono.just(allAlerts);
                    }
                    
                    List<DependabotAlertDto> newAlerts = pageResults.stream()
                        .filter(alert -> alert != null && alert.getHtmlUrl() != null && seenAlertUrls.add(alert.getHtmlUrl()))
                        .collect(Collectors.toList());

                    if (newAlerts.isEmpty() && !pageResults.isEmpty()) {
                        log.warn("No new (unique) Dependabot alerts found on page {}. All alerts on this page were duplicates. Stopping pagination.", page);
                        return Mono.just(allAlerts);
                    }
                    
                    allAlerts.addAll(newAlerts);
                    log.info("Fetched {} new Dependabot alerts for enterprise {} (page {}), total so far: {}", newAlerts.size(), enterprise, page, allAlerts.size());
                    
                    if (pageResults.size() < PAGE_SIZE) {
                        log.info("Finished fetching Dependabot alerts for enterprise {} (last page with {} alerts), total: {}", enterprise, pageResults.size(), allAlerts.size());
                        return Mono.just(allAlerts);
                    } else {
                        return fetchAllDependabotAlerts(enterprise, token, page + 1, allAlerts, seenAlertUrls);
                    }
                })
                .doOnError(WebClientResponseException.class, ex -> {
                    log.error("Error fetching Dependabot alerts for enterprise {} (page {}): {} - {}", enterprise, page, ex.getStatusCode(), ex.getResponseBodyAsString());
                })
                .onErrorReturn(allAlerts);
    }

    /**
     * Get consolidated enterprise vulnerability dashboard data.
     */
    public Mono<Map<String, Object>> getEnterpriseDashboardData(String enterprise, String token) {
        log.info("Fetching consolidated enterprise dashboard data for: {}", enterprise);
        
        return Mono.zip(
                getEnterpriseCodeScanningAlerts(enterprise, token),
                getEnterpriseSecretScanningAlerts(enterprise, token),
                getEnterpriseDependabotAlerts(enterprise, token)
        ).map(tuple -> {
            List<CodeScanningAlertDto> codeScanningAlerts = tuple.getT1();
            List<SecretScanningAlertDto> secretScanningAlerts = tuple.getT2();
            List<DependabotAlertDto> dependabotAlerts = tuple.getT3();
            
            log.info("Processing {} code scanning, {} secret scanning, {} dependabot alerts", 
                    codeScanningAlerts.size(), secretScanningAlerts.size(), dependabotAlerts.size());
            
            // Calculate summary statistics with enhanced categorization
            Map<String, Object> summary = new HashMap<>();
            
            // Code scanning summary with robust severity mapping
            Map<String, Object> codeScanningStats = categorizeCodeScanningAlerts(codeScanningAlerts);
            
            // Secret scanning summary (all treated as high severity)
            Map<String, Object> secretScanningStats = categorizeSecretScanningAlerts(secretScanningAlerts);
            
            // Dependabot summary with comprehensive severity mapping
            Map<String, Object> dependabotStats = categorizeDependabotAlerts(dependabotAlerts);
            
            summary.put("codeScanning", codeScanningStats);
            summary.put("secretScanning", secretScanningStats);
            summary.put("dependabot", dependabotStats);
            
            // Build response
            Map<String, Object> response = new HashMap<>();
            response.put("codeScanningAlerts", codeScanningAlerts);
            response.put("secretScanningAlerts", secretScanningAlerts);
            response.put("dependabotAlerts", dependabotAlerts);
            response.put("totalAlerts", codeScanningAlerts.size() + secretScanningAlerts.size() + dependabotAlerts.size());
            response.put("summary", summary);
            
            log.info("Enterprise dashboard data processing completed for: {}", enterprise);
            return response;
        });
    }
    
    /**
     * Categorize code scanning alerts by severity level.
     * Maps both severity and securitySeverityLevel fields to standardized categories.
     */
    private Map<String, Object> categorizeCodeScanningAlerts(List<CodeScanningAlertDto> alerts) {
        Map<String, Object> stats = new HashMap<>();
        
        long critical = alerts.stream().filter(alert -> 
            isCriticalSeverity(getCodeScanningSeverity(alert))).count();
        
        long high = alerts.stream().filter(alert -> 
            isHighSeverity(getCodeScanningSeverity(alert))).count();
        
        long medium = alerts.stream().filter(alert -> 
            isMediumSeverity(getCodeScanningSeverity(alert))).count();
        
        long low = alerts.stream().filter(alert -> 
            isLowSeverity(getCodeScanningSeverity(alert))).count();
        
        long error = alerts.stream().filter(alert -> 
            isErrorSeverity(getCodeScanningSeverity(alert))).count();
        
        stats.put("total", alerts.size());
        stats.put("critical", critical);
        stats.put("high", high);
        stats.put("medium", medium);
        stats.put("low", low);
        stats.put("error", error);
        
        log.debug("Code scanning categorization: total={}, critical={}, high={}, medium={}, low={}, error={}", 
                alerts.size(), critical, high, medium, low, error);
        
        return stats;
    }
    
    /**
     * Categorize secret scanning alerts.
     * All secret scanning alerts are considered HIGH severity by default.
     */
    private Map<String, Object> categorizeSecretScanningAlerts(List<SecretScanningAlertDto> alerts) {
        Map<String, Object> stats = new HashMap<>();
        
        // All secret scanning alerts are considered high severity
        stats.put("total", alerts.size());
        stats.put("critical", 0L);
        stats.put("high", (long) alerts.size());
        stats.put("medium", 0L);
        stats.put("low", 0L);
        stats.put("error", 0L);
        
        // Group by secret type for additional insights
        Map<String, Long> byType = alerts.stream()
                .collect(java.util.stream.Collectors.groupingBy(
                        alert -> alert.getSecretTypeDisplayName() != null ? 
                                alert.getSecretTypeDisplayName() : "Unknown",
                        java.util.stream.Collectors.counting()));
        stats.put("byType", byType);
        
        log.debug("Secret scanning categorization: total={} (all high severity), types={}", 
                alerts.size(), byType.size());
        
        return stats;
    }
    
    /**
     * Categorize Dependabot alerts by severity level.
     * Maps both securityAdvisory and securityVulnerability severity fields.
     */
    private Map<String, Object> categorizeDependabotAlerts(List<DependabotAlertDto> alerts) {
        Map<String, Object> stats = new HashMap<>();
        
        long critical = alerts.stream().filter(alert -> 
            isCriticalSeverity(getDependabotSeverity(alert))).count();
        
        long high = alerts.stream().filter(alert -> 
            isHighSeverity(getDependabotSeverity(alert))).count();
        
        long medium = alerts.stream().filter(alert -> 
            isMediumSeverity(getDependabotSeverity(alert))).count();
        
        long low = alerts.stream().filter(alert -> 
            isLowSeverity(getDependabotSeverity(alert))).count();
        
        long error = alerts.stream().filter(alert -> 
            isErrorSeverity(getDependabotSeverity(alert))).count();
        
        stats.put("total", alerts.size());
        stats.put("critical", critical);
        stats.put("high", high);
        stats.put("medium", medium);
        stats.put("low", low);
        stats.put("error", error);
        
        log.debug("Dependabot categorization: total={}, critical={}, high={}, medium={}, low={}, error={}", 
                alerts.size(), critical, high, medium, low, error);
        
        return stats;
    }
    
    /**
     * Extract severity level from code scanning alert.
     * Prioritizes securitySeverityLevel over severity field.
     */
    private String getCodeScanningSeverity(CodeScanningAlertDto alert) {
        if (alert.getRule() == null) {
            return "unknown";
        }
        
        // Prioritize security severity level
        if (alert.getRule().getSecuritySeverityLevel() != null) {
            return alert.getRule().getSecuritySeverityLevel().toLowerCase().trim();
        }
        
        // Fallback to general severity
        if (alert.getRule().getSeverity() != null) {
            return alert.getRule().getSeverity().toLowerCase().trim();
        }
        
        return "unknown";
    }
    
    /**
     * Extract severity level from Dependabot alert.
     * Prioritizes securityAdvisory severity over securityVulnerability severity.
     */
    private String getDependabotSeverity(DependabotAlertDto alert) {
        // Prioritize security advisory severity
        if (alert.getSecurityAdvisory() != null && alert.getSecurityAdvisory().getSeverity() != null) {
            return alert.getSecurityAdvisory().getSeverity().toLowerCase().trim();
        }
        
        // Fallback to security vulnerability severity
        if (alert.getSecurityVulnerability() != null && alert.getSecurityVulnerability().getSeverity() != null) {
            return alert.getSecurityVulnerability().getSeverity().toLowerCase().trim();
        }
        
        return "unknown";
    }
    
    /**
     * Determine if severity level is CRITICAL.
     */
    private boolean isCriticalSeverity(String severity) {
        return "critical".equals(severity);
    }
    
    /**
     * Determine if severity level is HIGH.
     */
    private boolean isHighSeverity(String severity) {
        return "high".equals(severity);
    }
    
    /**
     * Determine if severity level is MEDIUM.
     */
    private boolean isMediumSeverity(String severity) {
        return "medium".equals(severity) || "moderate".equals(severity);
    }
    
    /**
     * Determine if severity level is LOW.
     */
    private boolean isLowSeverity(String severity) {
        return "low".equals(severity) || "info".equals(severity) || "informational".equals(severity);
    }
    
    /**
     * Determine if severity level is ERROR/UNKNOWN.
     */
    private boolean isErrorSeverity(String severity) {
        return "unknown".equals(severity) || "error".equals(severity) || severity == null || severity.isEmpty();
    }

    // ===== INTERNAL METHODS FOR ASYNC JOB PROCESSING =====
    
    /**
     * Internal method to get code scanning alerts (synchronous for async job processing)
     */
    public Map<String, Object> getCodeScanningAlertsInternal(String enterprise, String token) {
        try {
            log.info("Internal: Fetching code scanning alerts for enterprise: {}", enterprise);
            
            List<CodeScanningAlertDto> alerts = getEnterpriseCodeScanningAlerts(enterprise, token).block();
            log.info("Fetched {} code scanning alerts for enterprise: {}", 
                    alerts != null ? alerts.size() : 0, enterprise);
            
            Map<String, Object> stats = categorizeCodeScanningAlerts(alerts != null ? alerts : new ArrayList<>());
            log.info("Code scanning stats for enterprise {}: {}", enterprise, stats);
            
            Map<String, Object> result = new HashMap<>();
            result.put("alerts", alerts);
            result.put("stats", stats);
            result.put("count", alerts != null ? alerts.size() : 0);
            
            return result;
            
        } catch (Exception e) {
            log.error("Internal error fetching code scanning alerts for enterprise {}: {}", enterprise, e.getMessage(), e);
            
            // Return empty stats instead of throwing exception
            Map<String, Object> emptyStats = new HashMap<>();
            emptyStats.put("total", 0);
            emptyStats.put("critical", 0);
            emptyStats.put("high", 0);
            emptyStats.put("medium", 0);
            emptyStats.put("low", 0);
            emptyStats.put("error", 0);
            
            Map<String, Object> result = new HashMap<>();
            result.put("alerts", new ArrayList<>());
            result.put("stats", emptyStats);
            result.put("count", 0);
            result.put("errorMessage", e.getMessage());
            
            return result;
        }
    }
    
    /**
     * Internal method to get secret scanning alerts (synchronous for async job processing)
     */
    public Map<String, Object> getSecretScanningAlertsInternal(String enterprise, String token) {
        try {
            log.info("Internal: Fetching secret scanning alerts for enterprise: {}", enterprise);
            
            List<SecretScanningAlertDto> alerts = getEnterpriseSecretScanningAlerts(enterprise, token).block();
            log.info("Fetched {} secret scanning alerts for enterprise: {}", 
                    alerts != null ? alerts.size() : 0, enterprise);
            
            Map<String, Object> stats = categorizeSecretScanningAlerts(alerts != null ? alerts : new ArrayList<>());
            log.info("Secret scanning stats for enterprise {}: {}", enterprise, stats);
            
            Map<String, Object> result = new HashMap<>();
            result.put("alerts", alerts);
            result.put("stats", stats);
            result.put("count", alerts != null ? alerts.size() : 0);
            
            return result;
            
        } catch (Exception e) {
            log.error("Internal error fetching secret scanning alerts for enterprise {}: {}", enterprise, e.getMessage(), e);
            
            // Return empty stats instead of throwing exception
            Map<String, Object> emptyStats = new HashMap<>();
            emptyStats.put("total", 0);
            emptyStats.put("critical", 0);
            emptyStats.put("high", 0);
            emptyStats.put("medium", 0);
            emptyStats.put("low", 0);
            emptyStats.put("error", 0);
            
            Map<String, Object> result = new HashMap<>();
            result.put("alerts", new ArrayList<>());
            result.put("stats", emptyStats);
            result.put("count", 0);
            result.put("errorMessage", e.getMessage());
            
            return result;
        }
    }
    
    /**
     * Internal method to get Dependabot alerts (synchronous for async job processing)
     */
    public Map<String, Object> getDependabotAlertsInternal(String enterprise, String token) {
        try {
            log.info("Internal: Fetching Dependabot alerts for enterprise: {}", enterprise);
            
            List<DependabotAlertDto> alerts = getEnterpriseDependabotAlerts(enterprise, token).block();
            log.info("Fetched {} Dependabot alerts for enterprise: {}", 
                    alerts != null ? alerts.size() : 0, enterprise);
            
            Map<String, Object> stats = categorizeDependabotAlerts(alerts != null ? alerts : new ArrayList<>());
            log.info("Dependabot stats for enterprise {}: {}", enterprise, stats);
            
            Map<String, Object> result = new HashMap<>();
            result.put("alerts", alerts);
            result.put("stats", stats);
            result.put("count", alerts != null ? alerts.size() : 0);
            
            return result;
            
        } catch (Exception e) {
            log.error("Internal error fetching Dependabot alerts for enterprise {}: {}", enterprise, e.getMessage(), e);
            
            // Return empty stats instead of throwing exception
            Map<String, Object> emptyStats = new HashMap<>();
            emptyStats.put("total", 0);
            emptyStats.put("critical", 0);
            emptyStats.put("high", 0);
            emptyStats.put("medium", 0);
            emptyStats.put("low", 0);
            emptyStats.put("error", 0);
            
            Map<String, Object> result = new HashMap<>();
            result.put("alerts", new ArrayList<>());
            result.put("stats", emptyStats);
            result.put("count", 0);
            result.put("errorMessage", e.getMessage());
            
            return result;
        }
    }
    
    /**
     * Internal method to build dashboard response (synchronous for async job processing)
     */
    public Map<String, Object> buildDashboardResponseInternal(String enterprise, String token) {
        try {
            log.info("Internal: Building dashboard response for enterprise: {}", enterprise);
            
            Map<String, Object> dashboardData = getEnterpriseDashboardData(enterprise, token).block();
            return dashboardData != null ? dashboardData : new HashMap<>();
            
        } catch (Exception e) {
            log.error("Internal error building dashboard response: {}", e.getMessage(), e);
            throw new RuntimeException("Failed to build dashboard response: " + e.getMessage(), e);
        }
    }
}