package com.ghas.vulnerabilityinsights.service;

import com.ghas.vulnerabilityinsights.dto.JobProgressUpdateDto;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
@Slf4j
public class WebSocketMessageService {
    
    private final SimpMessagingTemplate messagingTemplate;
    
    /**
     * Send progress update to specific job subscribers
     */
    public void sendJobProgressUpdate(String jobId, JobProgressUpdateDto update) {
        try {
            log.info("Sending WebSocket update for job {}: {}% complete - {}", 
                    jobId, update.getProgress(), update.getCurrentTask());
            log.debug("Full update data: {}", update);
            
            String topicPath = "/topic/job/" + jobId;
            log.debug("Sending to topic: {}", topicPath);
            
            // Send to specific job topic
            messagingTemplate.convertAndSend(topicPath, update);
            
            // Also send to enterprise-specific topic for any general listeners
            String enterpriseTopicPath = "/topic/enterprise/" + update.getEnterpriseName();
            log.debug("Also sending to enterprise topic: {}", enterpriseTopicPath);
            messagingTemplate.convertAndSend(enterpriseTopicPath, update);
            
            log.info("WebSocket update sent successfully for job {}", jobId);
            
        } catch (Exception e) {
            log.error("Failed to send WebSocket message for job {}: {}", jobId, e.getMessage(), e);
        }
    }
    
    /**
     * Send error message to job subscribers
     */
    public void sendJobError(String jobId, String enterpriseName, String errorMessage) {
        try {
            JobProgressUpdateDto errorUpdate = JobProgressUpdateDto.builder()
                    .jobId(jobId)
                    .enterpriseName(enterpriseName)
                    .status(JobProgressUpdateDto.JobStatus.FAILED)
                    .errorMessage(errorMessage)
                    .progress(0)
                    .currentTask("Error occurred")
                    .build();
            
            sendJobProgressUpdate(jobId, errorUpdate);
            
        } catch (Exception e) {
            log.error("Failed to send error message for job {}: {}", jobId, e.getMessage(), e);
        }
    }
    
    /**
     * Send completion message to job subscribers
     */
    public void sendJobCompletion(String jobId, JobProgressUpdateDto completionUpdate) {
        try {
            log.info("Sending job completion update for job {}", jobId);
            sendJobProgressUpdate(jobId, completionUpdate);
            
        } catch (Exception e) {
            log.error("Failed to send completion message for job {}: {}", jobId, e.getMessage(), e);
        }
    }
}
