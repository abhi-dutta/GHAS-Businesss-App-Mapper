package com.ghas.vulnerabilityinsights.repository;

import com.ghas.vulnerabilityinsights.model.RepositoryMapping;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

/**
 * Repository interface for RepositoryMapping entity.
 */
@Repository
public interface RepositoryMappingRepository extends JpaRepository<RepositoryMapping, Long> {
    
    /**
     * Find repository mappings by business application ID.
     */
    List<RepositoryMapping> findByBusinessApplicationId(Long businessApplicationId);
    
    /**
     * Find repository mappings by repository name.
     */
    List<RepositoryMapping> findByRepositoryName(String repositoryName);
    
    /**
     * Find repository mappings by repository full name.
     */
    List<RepositoryMapping> findByRepositoryFullName(String repositoryFullName);
    
    /**
     * Delete repository mappings by business application ID.
     */
    void deleteByBusinessApplicationId(Long businessApplicationId);
    
    /**
     * Count repository mappings by business application ID.
     */
    long countByBusinessApplicationId(Long businessApplicationId);
    
    /**
     * Find distinct repository names by business application organization.
     */
    @Query("SELECT DISTINCT rm.repositoryName FROM RepositoryMapping rm " +
           "JOIN rm.businessApplication ba WHERE ba.organization = :organization")
    List<String> findDistinctRepositoryNamesByOrganization(@Param("organization") String organization);

    /**
     * Find all repository mappings by business application organization.
     */
    @Query("SELECT rm FROM RepositoryMapping rm JOIN rm.businessApplication ba WHERE ba.organization = :organization")
    List<RepositoryMapping> findByBusinessApplicationOrganization(@Param("organization") String organization);
}
