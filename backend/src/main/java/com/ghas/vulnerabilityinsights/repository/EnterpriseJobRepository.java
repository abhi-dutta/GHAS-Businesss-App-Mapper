package com.ghas.vulnerabilityinsights.repository;

import com.ghas.vulnerabilityinsights.model.EnterpriseJob;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Repository
public interface EnterpriseJobRepository extends JpaRepository<EnterpriseJob, String> {
    
    /**
     * Find the most recent job for an enterprise
     */
    Optional<EnterpriseJob> findTopByEnterpriseNameOrderByCreatedAtDesc(String enterpriseName);
    
    /**
     * Find all active jobs (processing or pending)
     */
    @Query("SELECT j FROM EnterpriseJob j WHERE j.status IN ('PENDING', 'PROCESSING')")
    List<EnterpriseJob> findActiveJobs();
    
    /**
     * Find jobs older than a certain time that are still processing (for cleanup)
     */
    @Query("SELECT j FROM EnterpriseJob j WHERE j.status IN ('PENDING', 'PROCESSING') AND j.createdAt < :cutoffTime")
    List<EnterpriseJob> findStaleJobs(@Param("cutoffTime") LocalDateTime cutoffTime);
    
    /**
     * Find recent completed jobs for an enterprise (for caching purposes)
     */
    @Query("SELECT j FROM EnterpriseJob j WHERE j.enterpriseName = :enterpriseName AND j.status = 'COMPLETED' AND j.completedAt > :since ORDER BY j.completedAt DESC")
    List<EnterpriseJob> findRecentCompletedJobs(@Param("enterpriseName") String enterpriseName, @Param("since") LocalDateTime since);
    
    /**
     * Check if there's already a running job for an enterprise
     */
    @Query("SELECT j FROM EnterpriseJob j WHERE j.enterpriseName = :enterpriseName AND j.status IN ('PENDING', 'PROCESSING')")
    Optional<EnterpriseJob> findRunningJobForEnterprise(@Param("enterpriseName") String enterpriseName);
}
