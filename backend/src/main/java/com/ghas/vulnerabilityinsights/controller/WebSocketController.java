package com.ghas.vulnerabilityinsights.controller;

import com.ghas.vulnerabilityinsights.dto.JobProgressUpdateDto;
import com.ghas.vulnerabilityinsights.service.EnterpriseJobService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.messaging.handler.annotation.DestinationVariable;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.annotation.SubscribeMapping;
import org.springframework.stereotype.Controller;

import java.util.Optional;

@Controller
@RequiredArgsConstructor
@Slf4j
public class WebSocketController {

    private final EnterpriseJobService enterpriseJobService;

    /**
     * Handle subscription to job-specific progress updates
     */
    @SubscribeMapping("/topic/job/{jobId}")
    public JobProgressUpdateDto subscribeToJob(@DestinationVariable String jobId) {
        log.info("Client subscribing to job updates: {}", jobId);
        
        // Send current job status immediately upon subscription
        Optional<JobProgressUpdateDto> currentStatus = enterpriseJobService.getJobStatus(jobId);
        
        if (currentStatus.isPresent()) {
            log.info("Sending current status for job {}: {}%", jobId, currentStatus.get().getProgress());
            return currentStatus.get();
        } else {
            log.warn("Job {} not found for subscription", jobId);
            return JobProgressUpdateDto.builder()
                    .jobId(jobId)
                    .status(JobProgressUpdateDto.JobStatus.FAILED)
                    .errorMessage("Job not found")
                    .progress(0)
                    .build();
        }
    }

    /**
     * Handle subscription to enterprise-wide updates
     */
    @SubscribeMapping("/topic/enterprise/{enterpriseName}")
    public String subscribeToEnterprise(@DestinationVariable String enterpriseName) {
        log.info("Client subscribing to enterprise updates: {}", enterpriseName);
        return "Subscribed to enterprise: " + enterpriseName;
    }

    /**
     * Handle client ping/keepalive messages
     */
    @MessageMapping("/ping")
    @SendTo("/topic/pong")
    public String handlePing(String message) {
        log.debug("Received ping: {}", message);
        return "pong: " + System.currentTimeMillis();
    }
}
