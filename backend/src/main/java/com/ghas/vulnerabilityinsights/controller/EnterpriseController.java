package com.ghas.vulnerabilityinsights.controller;

import com.ghas.vulnerabilityinsights.dto.CodeScanningAlertDto;
import com.ghas.vulnerabilityinsights.dto.DependabotAlertDto;
import com.ghas.vulnerabilityinsights.dto.SecretScanningAlertDto;
import com.ghas.vulnerabilityinsights.dto.JobStartResponseDto;
import com.ghas.vulnerabilityinsights.dto.JobProgressUpdateDto;
import com.ghas.vulnerabilityinsights.service.EnterpriseService;
import com.ghas.vulnerabilityinsights.service.EnterpriseJobService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Mono;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * REST API endpoints for GitHub Enterprise vulnerability data.
 */
@RestController
@RequestMapping("/api/enterprise")
@RequiredArgsConstructor
@Slf4j
@CrossOrigin(origins = "*")
public class EnterpriseController {

    private final EnterpriseService enterpriseService;
    private final EnterpriseJobService enterpriseJobService;

    /**
     * Extract Bearer token from Authorization header
     */
    private String extractTokenFromHeader(String authHeader) {
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            return authHeader.substring(7);
        }
        throw new IllegalArgumentException("Invalid or missing Authorization header");
    }

    /**
     * Get all code scanning alerts for an enterprise.
     * Endpoint: GET /api/enterprise/{enterprise}/code-scanning/alerts
     */
    @GetMapping("/{enterprise}/code-scanning/alerts")
    public Mono<ResponseEntity<List<CodeScanningAlertDto>>> getEnterpriseCodeScanningAlerts(
            @PathVariable String enterprise,
            @RequestHeader(value = "Authorization", required = false) String authHeader) {
        log.info("Getting enterprise code scanning alerts for: {}", enterprise);
        
        try {
            String token = extractTokenFromHeader(authHeader);
            return enterpriseService.getEnterpriseCodeScanningAlerts(enterprise, token)
                    .map(ResponseEntity::ok)
                    .doOnError(error -> log.error("Error getting enterprise code scanning alerts for {}: {}", 
                            enterprise, error.getMessage()))
                    .onErrorReturn(ResponseEntity.internalServerError().build());
        } catch (IllegalArgumentException e) {
            log.error("Invalid or missing authorization header: {}", e.getMessage());
            return Mono.just(ResponseEntity.status(401).build());
        }
    }

    /**
     * Get all secret scanning alerts for an enterprise.
     * Endpoint: GET /api/enterprise/{enterprise}/secret-scanning/alerts
     */
    @GetMapping("/{enterprise}/secret-scanning/alerts")
    public Mono<ResponseEntity<List<SecretScanningAlertDto>>> getEnterpriseSecretScanningAlerts(
            @PathVariable String enterprise,
            @RequestHeader(value = "Authorization", required = false) String authHeader) {
        log.info("Getting enterprise secret scanning alerts for: {}", enterprise);
        
        try {
            String token = extractTokenFromHeader(authHeader);
            return enterpriseService.getEnterpriseSecretScanningAlerts(enterprise, token)
                    .map(ResponseEntity::ok)
                    .doOnError(error -> log.error("Error getting enterprise secret scanning alerts for {}: {}", 
                            enterprise, error.getMessage()))
                    .onErrorReturn(ResponseEntity.internalServerError().build());
        } catch (IllegalArgumentException e) {
            log.error("Invalid or missing authorization header: {}", e.getMessage());
            return Mono.just(ResponseEntity.status(401).build());
        }
    }

    /**
     * Get all Dependabot alerts for an enterprise.
     * Endpoint: GET /api/enterprise/{enterprise}/dependabot/alerts
     */
    @GetMapping("/{enterprise}/dependabot/alerts")
    public Mono<ResponseEntity<List<DependabotAlertDto>>> getEnterpriseDependabotAlerts(
            @PathVariable String enterprise,
            @RequestHeader(value = "Authorization", required = false) String authHeader) {
        log.info("Getting enterprise Dependabot alerts for: {}", enterprise);
        
        try {
            String token = extractTokenFromHeader(authHeader);
            return enterpriseService.getEnterpriseDependabotAlerts(enterprise, token)
                    .map(ResponseEntity::ok)
                    .doOnError(error -> log.error("Error getting enterprise Dependabot alerts for {}: {}", 
                            enterprise, error.getMessage()))
                    .onErrorReturn(ResponseEntity.internalServerError().build());
        } catch (IllegalArgumentException e) {
            log.error("Invalid or missing authorization header: {}", e.getMessage());
            return Mono.just(ResponseEntity.status(401).build());
        }
    }

    /**
     * Get consolidated enterprise vulnerability data with async processing.
     * This endpoint now starts an async job and returns immediately with job information.
     * 
     * This endpoint aggregates data from all three GitHub Enterprise APIs:
     * - Code scanning alerts
     * - Secret scanning alerts  
     * - Dependabot alerts
     * 
     * Endpoint: GET /api/enterprise/{enterprise}/dashboard
     */
    @GetMapping("/{enterprise}/dashboard")
    public ResponseEntity<Map<String, Object>> getEnterpriseDashboard(
            @PathVariable String enterprise,
            @RequestHeader(value = "Authorization", required = false) String authHeader) {
        log.info("Enterprise dashboard endpoint called for: {} (using async processing)", enterprise);
        
        try {
            // Extract token for validation (will be handled by async job system)
            String token = extractTokenFromHeader(authHeader);
            
            // Start async job
            JobStartResponseDto jobResponse = enterpriseJobService.startJob(enterprise, token);
            
            // Return immediate response indicating async processing
            Map<String, Object> response = new HashMap<>();
            response.put("status", "async_processing");
            response.put("message", "Enterprise scan started. Use WebSocket or polling for updates.");
            response.put("jobId", jobResponse.getJobId());
            response.put("websocketUrl", jobResponse.getWebsocketUrl());
            response.put("estimatedDurationMinutes", jobResponse.getEstimatedDurationMinutes());
            response.put("pollingUrl", "/api/enterprise/jobs/" + jobResponse.getJobId() + "/status");
            
            // If we have cached results, include them
            if (jobResponse.isUseExistingResults() && jobResponse.getExistingResults() != null) {
                response.put("cachedResults", jobResponse.getExistingResults());
                response.put("status", "cached_results_available");
            }
            
            return ResponseEntity.accepted().body(response);
            
        } catch (IllegalArgumentException e) {
            log.error("Invalid or missing authorization header: {}", e.getMessage());
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("error", "Invalid or missing Authorization header");
            return ResponseEntity.status(401).body(errorResponse);
        } catch (Exception e) {
            log.error("Error in dashboard endpoint: {}", e.getMessage(), e);
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("error", "Failed to start enterprise scan: " + e.getMessage());
            return ResponseEntity.status(500).body(errorResponse);
        }
    }

    /**
     * Get consolidated enterprise vulnerability data (alias for dashboard endpoint).
     * This is an alias endpoint that provides the same functionality as /dashboard
     * 
     * Endpoint: GET /api/enterprise/{enterprise}/vulnerabilities
     */
    @GetMapping("/{enterprise}/vulnerabilities")
    public Mono<ResponseEntity<Map<String, Object>>> getEnterpriseVulnerabilities(
            @PathVariable String enterprise,
            @RequestHeader(value = "Authorization", required = false) String authHeader) {
        log.info("Getting enterprise vulnerabilities for: {}", enterprise);
        
        try {
            String token = extractTokenFromHeader(authHeader);
            return enterpriseService.getEnterpriseDashboardData(enterprise, token)
                    .map(ResponseEntity::ok)
                    .doOnError(error -> log.error("Error getting enterprise vulnerabilities for {}: {}", 
                            enterprise, error.getMessage()))
                    .onErrorReturn(ResponseEntity.internalServerError().build());
        } catch (IllegalArgumentException e) {
            log.error("Invalid or missing authorization header: {}", e.getMessage());
            return Mono.just(ResponseEntity.status(401).build());
        }
    }

    /**
     * Simple test endpoint to verify the enterprise endpoints are accessible.
     * Endpoint: GET /api/enterprise/test
     */
    @GetMapping("/test")
    public ResponseEntity<Map<String, String>> testEndpoint() {
        log.info("Enterprise test endpoint called");
        Map<String, String> response = new HashMap<>();
        response.put("status", "success");
        response.put("message", "Enterprise endpoints are accessible");
        response.put("timestamp", java.time.Instant.now().toString());
        return ResponseEntity.ok(response);
    }

    // ===== ASYNC JOB ENDPOINTS =====
    
    /**
     * Start an asynchronous enterprise vulnerability scan.
     * Endpoint: POST /api/enterprise/{enterprise}/scan/start
     */
    @PostMapping("/{enterprise}/scan/start")
    public ResponseEntity<JobStartResponseDto> startEnterpriseJob(
            @PathVariable String enterprise,
            @RequestHeader(value = "Authorization", required = false) String authHeader) {
        log.info("Starting async enterprise scan for: {}", enterprise);
        
        try {
            // Extract token for async processing
            String token = extractTokenFromHeader(authHeader);
            
            JobStartResponseDto response = enterpriseJobService.startJob(enterprise, token);
            
            if ("CACHED".equals(response.getStatus())) {
                return ResponseEntity.ok(response);
            } else {
                return ResponseEntity.accepted().body(response);
            }
            
        } catch (IllegalArgumentException e) {
            log.error("Invalid or missing authorization header: {}", e.getMessage());
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("error", "Invalid or missing Authorization header");
            
            JobStartResponseDto errorJob = JobStartResponseDto.builder()
                    .jobId(null)
                    .enterpriseName(enterprise)
                    .status("ERROR")
                    .message("Authentication failed: " + e.getMessage())
                    .build();
            
            return ResponseEntity.status(401).body(errorJob);
        } catch (Exception e) {
            log.error("Error starting enterprise job: {}", e.getMessage(), e);
            
            JobStartResponseDto errorJob = JobStartResponseDto.builder()
                    .jobId(null)
                    .enterpriseName(enterprise)
                    .status("ERROR")
                    .message("Failed to start job: " + e.getMessage())
                    .build();
            
            return ResponseEntity.status(500).body(errorJob);
        }
    }
    
    /**
     * Get the status of an enterprise job.
     * Endpoint: GET /api/enterprise/jobs/{jobId}/status
     */
    @GetMapping("/jobs/{jobId}/status")
    public ResponseEntity<JobProgressUpdateDto> getJobStatus(@PathVariable String jobId) {
        log.info("Getting status for job: {}", jobId);
        
        try {
            Optional<JobProgressUpdateDto> jobStatus = enterpriseJobService.getJobStatus(jobId);
            
            if (jobStatus.isPresent()) {
                return ResponseEntity.ok(jobStatus.get());
            } else {
                return ResponseEntity.notFound().build();
            }
            
        } catch (Exception e) {
            log.error("Error getting job status for {}: {}", jobId, e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }
}
