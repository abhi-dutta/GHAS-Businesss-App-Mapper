package com.ghas.vulnerabilityinsights.controller;

import com.ghas.vulnerabilityinsights.dto.CodeScanningAlertDto;
import com.ghas.vulnerabilityinsights.dto.DependabotAlertDto;
import com.ghas.vulnerabilityinsights.dto.SecretScanningAlertDto;
import com.ghas.vulnerabilityinsights.service.EnterpriseService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Mono;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * REST API endpoints for GitHub Enterprise vulnerability data.
 */
@RestController
@RequestMapping("/api/enterprise")
@RequiredArgsConstructor
@Slf4j
@CrossOrigin(origins = "*")
public class EnterpriseController {

    private final EnterpriseService enterpriseService;

    /**
     * Extract Bearer token from Authorization header
     */
    private String extractTokenFromHeader(String authHeader) {
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            return authHeader.substring(7);
        }
        throw new IllegalArgumentException("Invalid or missing Authorization header");
    }

    /**
     * Get all code scanning alerts for an enterprise.
     * Endpoint: GET /api/enterprise/{enterprise}/code-scanning/alerts
     */
    @GetMapping("/{enterprise}/code-scanning/alerts")
    public Mono<ResponseEntity<List<CodeScanningAlertDto>>> getEnterpriseCodeScanningAlerts(
            @PathVariable String enterprise,
            @RequestHeader(value = "Authorization", required = false) String authHeader) {
        log.info("Getting enterprise code scanning alerts for: {}", enterprise);
        
        try {
            String token = extractTokenFromHeader(authHeader);
            return enterpriseService.getEnterpriseCodeScanningAlerts(enterprise, token)
                    .map(ResponseEntity::ok)
                    .doOnError(error -> log.error("Error getting enterprise code scanning alerts for {}: {}", 
                            enterprise, error.getMessage()))
                    .onErrorReturn(ResponseEntity.internalServerError().build());
        } catch (IllegalArgumentException e) {
            log.error("Invalid or missing authorization header: {}", e.getMessage());
            return Mono.just(ResponseEntity.status(401).build());
        }
    }

    /**
     * Get all secret scanning alerts for an enterprise.
     * Endpoint: GET /api/enterprise/{enterprise}/secret-scanning/alerts
     */
    @GetMapping("/{enterprise}/secret-scanning/alerts")
    public Mono<ResponseEntity<List<SecretScanningAlertDto>>> getEnterpriseSecretScanningAlerts(
            @PathVariable String enterprise,
            @RequestHeader(value = "Authorization", required = false) String authHeader) {
        log.info("Getting enterprise secret scanning alerts for: {}", enterprise);
        
        try {
            String token = extractTokenFromHeader(authHeader);
            return enterpriseService.getEnterpriseSecretScanningAlerts(enterprise, token)
                    .map(ResponseEntity::ok)
                    .doOnError(error -> log.error("Error getting enterprise secret scanning alerts for {}: {}", 
                            enterprise, error.getMessage()))
                    .onErrorReturn(ResponseEntity.internalServerError().build());
        } catch (IllegalArgumentException e) {
            log.error("Invalid or missing authorization header: {}", e.getMessage());
            return Mono.just(ResponseEntity.status(401).build());
        }
    }

    /**
     * Get all Dependabot alerts for an enterprise.
     * Endpoint: GET /api/enterprise/{enterprise}/dependabot/alerts
     */
    @GetMapping("/{enterprise}/dependabot/alerts")
    public Mono<ResponseEntity<List<DependabotAlertDto>>> getEnterpriseDependabotAlerts(
            @PathVariable String enterprise,
            @RequestHeader(value = "Authorization", required = false) String authHeader) {
        log.info("Getting enterprise Dependabot alerts for: {}", enterprise);
        
        try {
            String token = extractTokenFromHeader(authHeader);
            return enterpriseService.getEnterpriseDependabotAlerts(enterprise, token)
                    .map(ResponseEntity::ok)
                    .doOnError(error -> log.error("Error getting enterprise Dependabot alerts for {}: {}", 
                            enterprise, error.getMessage()))
                    .onErrorReturn(ResponseEntity.internalServerError().build());
        } catch (IllegalArgumentException e) {
            log.error("Invalid or missing authorization header: {}", e.getMessage());
            return Mono.just(ResponseEntity.status(401).build());
        }
    }

    /**
     * Get consolidated enterprise vulnerability dashboard data.
     * This endpoint aggregates data from all three GitHub Enterprise APIs:
     * - Code scanning alerts
     * - Secret scanning alerts  
     * - Dependabot alerts
     * 
     * Endpoint: GET /api/enterprise/{enterprise}/dashboard
     */
    @GetMapping("/{enterprise}/dashboard")
    public Mono<ResponseEntity<Map<String, Object>>> getEnterpriseDashboard(
            @PathVariable String enterprise,
            @RequestHeader(value = "Authorization", required = false) String authHeader) {
        log.info("Getting enterprise vulnerability dashboard for: {}", enterprise);
        
        try {
            String token = extractTokenFromHeader(authHeader);
            return enterpriseService.getEnterpriseDashboardData(enterprise, token)
                    .map(ResponseEntity::ok)
                    .doOnError(error -> log.error("Error getting enterprise dashboard for {}: {}", 
                            enterprise, error.getMessage()))
                    .onErrorReturn(ResponseEntity.internalServerError().build());
        } catch (IllegalArgumentException e) {
            log.error("Invalid or missing authorization header: {}", e.getMessage());
            return Mono.just(ResponseEntity.status(401).build());
        }
    }

    /**
     * Get consolidated enterprise vulnerability data (alias for dashboard endpoint).
     * This is an alias endpoint that provides the same functionality as /dashboard
     * 
     * Endpoint: GET /api/enterprise/{enterprise}/vulnerabilities
     */
    @GetMapping("/{enterprise}/vulnerabilities")
    public Mono<ResponseEntity<Map<String, Object>>> getEnterpriseVulnerabilities(
            @PathVariable String enterprise,
            @RequestHeader(value = "Authorization", required = false) String authHeader) {
        log.info("Getting enterprise vulnerabilities for: {}", enterprise);
        
        try {
            String token = extractTokenFromHeader(authHeader);
            return enterpriseService.getEnterpriseDashboardData(enterprise, token)
                    .map(ResponseEntity::ok)
                    .doOnError(error -> log.error("Error getting enterprise vulnerabilities for {}: {}", 
                            enterprise, error.getMessage()))
                    .onErrorReturn(ResponseEntity.internalServerError().build());
        } catch (IllegalArgumentException e) {
            log.error("Invalid or missing authorization header: {}", e.getMessage());
            return Mono.just(ResponseEntity.status(401).build());
        }
    }

    /**
     * Simple test endpoint to verify the enterprise endpoints are accessible.
     * Endpoint: GET /api/enterprise/test
     */
    @GetMapping("/test")
    public ResponseEntity<Map<String, String>> testEndpoint() {
        log.info("Enterprise test endpoint called");
        Map<String, String> response = new HashMap<>();
        response.put("status", "success");
        response.put("message", "Enterprise endpoints are accessible");
        response.put("timestamp", java.time.Instant.now().toString());
        return ResponseEntity.ok(response);
    }

}
