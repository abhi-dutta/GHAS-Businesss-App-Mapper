package com.ghas.vulnerabilityinsights.controller;

import com.ghas.vulnerabilityinsights.dto.BusinessApplicationDto;
import com.ghas.vulnerabilityinsights.dto.BusinessApplicationVulnerabilityDto;
import com.ghas.vulnerabilityinsights.dto.CreateBusinessApplicationDto;
import com.ghas.vulnerabilityinsights.dto.VulnerabilityTrendDto;
import com.ghas.vulnerabilityinsights.service.BusinessApplicationService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import java.util.List;

/**
 * REST controller for business application operations.
 */
@RestController
@RequestMapping("/api/business-applications")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "Business Applications", description = "Operations for managing business applications")
@CrossOrigin(origins = "*")
public class BusinessApplicationController {
    
    private final BusinessApplicationService businessApplicationService;
    
    /**
     * Create a new business application.
     */
    @PostMapping
    @Operation(summary = "Create a new business application")
    public ResponseEntity<BusinessApplicationDto> createBusinessApplication(
            @Valid @RequestBody CreateBusinessApplicationDto createDto) {
        
        log.info("Creating business application: {}", createDto.getName());
        
        try {
            BusinessApplicationDto createdApp = businessApplicationService.createBusinessApplication(createDto);
            return ResponseEntity.status(HttpStatus.CREATED).body(createdApp);
        } catch (RuntimeException e) {
            log.error("Error creating business application: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        }
    }
    
    /**
     * Get all business applications for an organization.
     */
    @GetMapping
    @Operation(summary = "Get all business applications for an organization")
    public ResponseEntity<List<BusinessApplicationDto>> getBusinessApplications(
            @Parameter(description = "GitHub organization name") 
            @RequestParam String organization) {
        
        log.info("Fetching business applications for organization: {}", organization);
        
        try {
            List<BusinessApplicationDto> applications = businessApplicationService.getBusinessApplications(organization);
            return ResponseEntity.ok(applications);
        } catch (RuntimeException e) {
            log.error("Error fetching business applications: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        }
    }
    
    /**
     * Get business application by ID.
     */
    @GetMapping("/{id}")
    @Operation(summary = "Get business application by ID")
    public ResponseEntity<BusinessApplicationDto> getBusinessApplicationById(
            @Parameter(description = "Business application ID") 
            @PathVariable Long id) {
        
        log.info("Fetching business application with ID: {}", id);
        
        return businessApplicationService.getBusinessApplicationById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }
    
    /**
     * Update business application.
     */
    @PutMapping("/{id}")
    @Operation(summary = "Update business application")
    public ResponseEntity<BusinessApplicationDto> updateBusinessApplication(
            @Parameter(description = "Business application ID") 
            @PathVariable Long id,
            @Valid @RequestBody CreateBusinessApplicationDto updateDto) {
        
        log.info("Updating business application with ID: {}", id);
        
        try {
            BusinessApplicationDto updatedApp = businessApplicationService.updateBusinessApplication(id, updateDto);
            return ResponseEntity.ok(updatedApp);
        } catch (RuntimeException e) {
            log.error("Error updating business application: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        }
    }
    
    /**
     * Delete business application.
     */
    @DeleteMapping("/{id}")
    @Operation(summary = "Delete business application")
    public ResponseEntity<Void> deleteBusinessApplication(
            @Parameter(description = "Business application ID") 
            @PathVariable Long id) {
        
        log.info("Deleting business application with ID: {}", id);
        
        try {
            businessApplicationService.deleteBusinessApplication(id);
            return ResponseEntity.noContent().build();
        } catch (RuntimeException e) {
            log.error("Error deleting business application: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        }
    }
    
    /**
     * Get business application statistics.
     */
    @GetMapping("/stats")
    @Operation(summary = "Get business application statistics")
    public ResponseEntity<BusinessApplicationService.BusinessApplicationStatsDto> getBusinessApplicationStats(
            @Parameter(description = "GitHub organization name") 
            @RequestParam String organization) {
        
        log.info("Fetching business application statistics for organization: {}", organization);
        
        try {
            BusinessApplicationService.BusinessApplicationStatsDto stats = 
                    businessApplicationService.getBusinessApplicationStats(organization);
            return ResponseEntity.ok(stats);
        } catch (RuntimeException e) {
            log.error("Error fetching business application statistics: {}", e.getMessage());
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Get vulnerability data for business applications.
     */
    @GetMapping("/vulnerability-data")
    @Operation(summary = "Get vulnerability data for business applications")
    public ResponseEntity<List<BusinessApplicationVulnerabilityDto>> getBusinessApplicationVulnerabilityData(
            @Parameter(description = "GitHub organization name") 
            @RequestParam String organization,
            @Parameter(description = "GitHub Personal Access Token") 
            @RequestHeader("Authorization") String token) {
        
        log.info("Fetching vulnerability data for business applications in organization: {}", organization);
        
        // Remove "Bearer " prefix if present
        String cleanToken = token.startsWith("Bearer ") ? token.substring(7) : token;
        
        try {
            List<BusinessApplicationVulnerabilityDto> vulnerabilityData = 
                    businessApplicationService.getBusinessApplicationVulnerabilityData(organization, cleanToken);
            
            log.info("Successfully fetched vulnerability data for {} business applications", vulnerabilityData.size());
            return ResponseEntity.ok(vulnerabilityData);
        } catch (RuntimeException e) {
            log.error("Error fetching vulnerability data for organization {}: {}", organization, e.getMessage(), e);
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Get vulnerability data for business applications (debug version - includes all states).
     */
    @GetMapping("/vulnerability-data-debug")
    @Operation(summary = "Get vulnerability data for business applications (debug mode)")
    public ResponseEntity<List<BusinessApplicationVulnerabilityDto>> getBusinessApplicationVulnerabilityDataDebug(
            @Parameter(description = "GitHub organization name") 
            @RequestParam String organization,
            @Parameter(description = "GitHub Personal Access Token") 
            @RequestHeader("Authorization") String token) {
        
        log.info("Fetching vulnerability data (debug mode) for business applications in organization: {}", organization);
        
        // Remove "Bearer " prefix if present
        String cleanToken = token.startsWith("Bearer ") ? token.substring(7) : token;
        
        try {
            List<BusinessApplicationVulnerabilityDto> vulnerabilityData = 
                    businessApplicationService.getBusinessApplicationVulnerabilityDataDebug(organization, cleanToken);
            
            log.info("Successfully fetched vulnerability data (debug mode) for {} business applications", vulnerabilityData.size());
            return ResponseEntity.ok(vulnerabilityData);
        } catch (RuntimeException e) {
            log.error("Error fetching vulnerability data (debug mode) for organization {}: {}", organization, e.getMessage(), e);
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Get vulnerability trend data for an organization.
     */
    @GetMapping("/vulnerability-trend")
    @Operation(summary = "Get vulnerability trend data for an organization")
    public ResponseEntity<List<VulnerabilityTrendDto>> getVulnerabilityTrend(
            @Parameter(description = "GitHub organization name")
            @RequestParam String organization,
            @Parameter(description = "GitHub Personal Access Token")
            @RequestHeader("Authorization") String token) {

        log.info("Fetching vulnerability trend data for organization: {}", organization);

        String cleanToken = token.startsWith("Bearer ") ? token.substring(7) : token;

        try {
            List<VulnerabilityTrendDto> trendData = businessApplicationService.getVulnerabilityTrend(organization, cleanToken);
            log.info("Successfully fetched vulnerability trend data for organization {}", organization);
            return ResponseEntity.ok(trendData);
        } catch (Exception e) {
            log.error("Error fetching vulnerability trend data for organization {}: {}", organization, e.getMessage(), e);
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Test endpoint to verify API connectivity.
     */
    @GetMapping("/test")
    @Operation(summary = "Test endpoint for API connectivity")
    public ResponseEntity<String> testEndpoint() {
        log.info("Test endpoint called");
        return ResponseEntity.ok("API is working!");
    }
}
