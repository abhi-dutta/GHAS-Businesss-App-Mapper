package com.ghas.vulnerabilityinsights.controller;

import com.ghas.vulnerabilityinsights.dto.GitHubRepositoryDto;
import com.ghas.vulnerabilityinsights.dto.OrganizationVulnerabilityStatsDto;
import com.ghas.vulnerabilityinsights.service.GitHubApiService;
import com.ghas.vulnerabilityinsights.service.VulnerabilityAnalysisService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Mono;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * REST controller for GitHub API operations.
 */
@RestController
@RequestMapping("/api/github")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "GitHub API", description = "Operations for interacting with GitHub API")
@CrossOrigin(origins = "*")
public class GitHubController {
    
    private final GitHubApiService gitHubApiService;
    private final VulnerabilityAnalysisService vulnerabilityAnalysisService;
    
    /**
     * Validate GitHub Personal Access Token.
     */
    @PostMapping("/validate-token")
    @Operation(summary = "Validate GitHub Personal Access Token")
    public Mono<ResponseEntity<Boolean>> validateToken(
            @Parameter(description = "GitHub Personal Access Token") 
            @RequestHeader("Authorization") String token) {
        
        log.info("Received token validation request");
        log.debug("Authorization header: {}", token != null ? "Bearer " + token.substring(Math.min(7, token.length())) + "..." : "null");
        
        // Remove "Bearer " prefix if present
        String cleanToken = token.startsWith("Bearer ") ? token.substring(7) : token;
        
        if (cleanToken.trim().isEmpty()) {
            log.warn("Empty token received");
            return Mono.just(ResponseEntity.badRequest().body(false));
        }
        
        return gitHubApiService.validateToken(cleanToken)
                .map(isValid -> {
                    log.info("Token validation result: {}", isValid);
                    return ResponseEntity.ok(isValid);
                })
                .onErrorResume(ex -> {
                    log.error("Error during token validation: {}", ex.getMessage());
                    return Mono.just(ResponseEntity.badRequest().body(false));
                });
    }
    
    /**
     * Get all repositories from a GitHub organization.
     */
    @GetMapping("/organizations/{orgName}/repositories")
    @Operation(summary = "Get all repositories from a GitHub organization")
    public Mono<ResponseEntity<List<GitHubRepositoryDto>>> getOrganizationRepositories(
            @Parameter(description = "GitHub organization name") 
            @PathVariable String orgName,
            @Parameter(description = "GitHub Personal Access Token") 
            @RequestHeader("Authorization") String token) {
        
        log.info("Fetching repositories for organization: {}", orgName);
        
        // Remove "Bearer " prefix if present
        String cleanToken = token.startsWith("Bearer ") ? token.substring(7) : token;
        
        return gitHubApiService.getOrganizationRepositories(orgName, cleanToken)
                .map(repos -> {
                    // Debug: Log a sample repository
                    if (!repos.isEmpty()) {
                        GitHubRepositoryDto sample = repos.get(0);
                        log.info("Controller - Sample repo: {} -> htmlUrl: {}", sample.getName(), sample.getHtmlUrl());
                    }
                    return ResponseEntity.ok(repos);
                })
                .onErrorReturn(ResponseEntity.badRequest().build());
    }
    
    /**
     * Get all repositories from a GitHub organization with language details.
     */
    @GetMapping("/organizations/{orgName}/repositories-with-languages")
    @Operation(summary = "Get all repositories from a GitHub organization with language details")
    public Mono<ResponseEntity<List<GitHubRepositoryDto>>> getOrganizationRepositoriesWithLanguages(
            @Parameter(description = "GitHub organization name") 
            @PathVariable String orgName,
            @Parameter(description = "GitHub Personal Access Token") 
            @RequestHeader("Authorization") String token) {
        
        log.info("Fetching repositories with languages for organization: {}", orgName);
        
        // Remove "Bearer " prefix if present
        String cleanToken = token.startsWith("Bearer ") ? token.substring(7) : token;
        
        return gitHubApiService.getOrganizationRepositoriesWithLanguages(orgName, cleanToken)
                .map(repos -> {
                    // Debug: Log a sample repository
                    if (!repos.isEmpty()) {
                        GitHubRepositoryDto sample = repos.get(0);
                        log.info("Controller (with languages) - Sample repo: {} -> htmlUrl: {}", sample.getName(), sample.getHtmlUrl());
                    }
                    return ResponseEntity.ok(repos);
                })
                .onErrorReturn(ResponseEntity.badRequest().build());
    }
    
    /**
     * Get vulnerability alerts for a repository.
     */
    @GetMapping("/organizations/{orgName}/repositories/{repoName}/vulnerability-alerts")
    @Operation(summary = "Get vulnerability alerts for a repository")
    public Mono<ResponseEntity<Object>> getVulnerabilityAlerts(
            @Parameter(description = "GitHub organization name") 
            @PathVariable String orgName,
            @Parameter(description = "Repository name") 
            @PathVariable String repoName,
            @Parameter(description = "GitHub Personal Access Token") 
            @RequestHeader("Authorization") String token) {
        
        log.info("Fetching vulnerability alerts for repository: {}/{}", orgName, repoName);
        
        // Remove "Bearer " prefix if present
        String cleanToken = token.startsWith("Bearer ") ? token.substring(7) : token;
        
        return gitHubApiService.getVulnerabilityAlerts(orgName, repoName, cleanToken)
                .map(ResponseEntity::ok)
                .onErrorReturn(ResponseEntity.badRequest().build());
    }
    
    /**
     * Get security advisories for a repository.
     */
    @GetMapping("/organizations/{orgName}/repositories/{repoName}/security-advisories")
    @Operation(summary = "Get security advisories for a repository")
    public Mono<ResponseEntity<Object>> getSecurityAdvisories(
            @Parameter(description = "GitHub organization name") 
            @PathVariable String orgName,
            @Parameter(description = "Repository name") 
            @PathVariable String repoName,
            @Parameter(description = "GitHub Personal Access Token") 
            @RequestHeader("Authorization") String token) {
        
        log.info("Fetching security advisories for repository: {}/{}", orgName, repoName);
        
        // Remove "Bearer " prefix if present
        String cleanToken = token.startsWith("Bearer ") ? token.substring(7) : token;
        
        return gitHubApiService.getSecurityAdvisories(orgName, repoName, cleanToken)
                .map(ResponseEntity::ok)
                .onErrorReturn(ResponseEntity.badRequest().build());
    }
    
    /**
     * Get comprehensive vulnerability statistics for an organization.
     */
    @GetMapping("/organizations/{orgName}/vulnerability-stats")
    @Operation(summary = "Get comprehensive vulnerability statistics for an organization")
    public Mono<ResponseEntity<OrganizationVulnerabilityStatsDto>> getOrganizationVulnerabilityStats(
            @Parameter(description = "GitHub organization name") 
            @PathVariable String orgName,
            @Parameter(description = "GitHub Personal Access Token") 
            @RequestHeader("Authorization") String token) {
        
        log.info("Fetching vulnerability statistics for organization: {}", orgName);
        
        // Remove "Bearer " prefix if present
        String cleanToken = token.startsWith("Bearer ") ? token.substring(7) : token;
        
        return vulnerabilityAnalysisService.getOrganizationVulnerabilityStatsEfficient(orgName, cleanToken)
                .map(ResponseEntity::ok)
                .onErrorResume(e -> {
                    log.error("Failed to fetch vulnerability statistics for organization {}: {}", orgName, e.getMessage());
                    return Mono.just(ResponseEntity.badRequest().build());
                });
    }

    /**
     * Test code scanning alerts endpoint.
     */
    @GetMapping("/test-code-scanning/{orgName}/{repoName}")
    @Operation(summary = "Test code scanning alerts for a repository")
    public Mono<ResponseEntity<Object>> testCodeScanningAlerts(
            @Parameter(description = "GitHub organization name") 
            @PathVariable String orgName,
            @Parameter(description = "Repository name") 
            @PathVariable String repoName,
            @Parameter(description = "GitHub Personal Access Token") 
            @RequestHeader("Authorization") String token) {
        
        log.info("Testing code scanning alerts for repository: {}/{}", orgName, repoName);
        
        // Remove "Bearer " prefix if present
        String cleanToken = token.startsWith("Bearer ") ? token.substring(7) : token;
        
        return gitHubApiService.getCodeScanningAlerts(orgName, repoName, cleanToken)
                .map(alerts -> {
                    log.info("Code scanning alerts response: {}", alerts);
                    return ResponseEntity.ok((Object) alerts);
                })
                .onErrorResume(e -> Mono.just(ResponseEntity.badRequest().body("Failed to fetch code scanning alerts.")));
    }

    /**
     * Test endpoint to verify organization vulnerability data accuracy.
     */
    @GetMapping("/organizations/{orgName}/vulnerability-stats-debug")
    @Operation(summary = "Debug endpoint for organization vulnerability statistics")
    public Mono<ResponseEntity<Object>> getOrganizationVulnerabilityStatsDebug(
            @Parameter(description = "GitHub organization name") 
            @PathVariable String orgName,
            @Parameter(description = "GitHub Personal Access Token") 
            @RequestHeader("Authorization") String token) {
        
        log.info("Fetching debug vulnerability statistics for organization: {}", orgName);
        
        // Remove "Bearer " prefix if present
        String cleanToken = token.startsWith("Bearer ") ? token.substring(7) : token;
        
        // Get repository count first
        Mono<List<GitHubRepositoryDto>> repositories = gitHubApiService.getOrganizationRepositories(orgName, cleanToken);
        
        return repositories.flatMap(repos -> {
            Map<String, Object> debugInfo = new HashMap<>();
            debugInfo.put("totalRepositories", repos.size());
            debugInfo.put("repositoryNames", repos.stream().map(GitHubRepositoryDto::getName).collect(Collectors.toList()));
            
            // Get vulnerability stats
            return vulnerabilityAnalysisService.getOrganizationVulnerabilityStatsEfficient(orgName, cleanToken)
                    .map(stats -> {
                        debugInfo.put("vulnerabilityStats", stats);
                        debugInfo.put("dataSource", "GitHub Organization-level APIs");
                        debugInfo.put("timestamp", java.time.Instant.now().toString());
                        return ResponseEntity.ok((Object) debugInfo);
                    });
        })
        .onErrorResume(e -> {
            Map<String, Object> errorInfo = new HashMap<>();
            errorInfo.put("error", e.getMessage());
            errorInfo.put("timestamp", java.time.Instant.now().toString());
            log.error("Failed to fetch debug vulnerability statistics for organization {}: {}", orgName, e.getMessage());
            return Mono.just(ResponseEntity.badRequest().body((Object) errorInfo));
        });
    }
}
